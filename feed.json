{
    "version": "https://jsonfeed.org/version/1",
    "title": "RockByte Security Blog",
    "description": "",
    "home_page_url": "https://blog.rockbytesec.com",
    "feed_url": "https://blog.rockbytesec.com/feed.json",
    "user_comment": "",
    "author": {
        "name": "Mehul Panchal"
    },
    "items": [
        {
            "id": "https://blog.rockbytesec.com/rockbyte-security-top-10-web-application-vulnerabilities.html",
            "url": "https://blog.rockbytesec.com/rockbyte-security-top-10-web-application-vulnerabilities.html",
            "title": "RockByte Security&#x27;s Top 10 Web Application Vulnerabilities",
            "summary": "These are the top 10 vulnerabilities that I look for when I pentest a Web Application. I will be dumping all that I have learned about these vulnerabilities and their&hellip;",
            "content_html": "<p>These are the top 10 vulnerabilities that I look for when I pentest a Web Application. I will be dumping all that I have learned about these vulnerabilities and their fixes in this and subsequent posts.</p>\n<p>Here's the list of all those vulnerabilities, so that you won't have to scroll down to know them all:</p>\n<ol>\n<li>Broken Access Control</li>\n<li>JSON Web Token (JWT)</li>\n<li>NoSQL injection</li>\n<li>File Upload</li>\n<li>SSRF</li>\n<li>XXE</li>\n<li>Broken Autentication</li>\n<li>XSS</li>\n<li>Sensitive Data Exposure</li>\n<li>Business Logic Failure</li>\n</ol>\n<h4>1. Broken Access Control</h4>\n<p>Role-Based Access Control comes into play where there's a hierarchy in an application. Just like any organisation's hierarchy, applications have their own set of roles. These roles allow users to have privileges.</p>\n<p>Each role has its own set of privileges in an application. There's two types of Broken Access Control: Horizontal and Vertical.</p>\n<p>To perform Horizontal BAC, you need to perform actions that another user, of same role as your user, can perform.</p>\n<p>To perform Vertical BAC, you need to perform actions that another user, of a higher role than your user, can perform.</p>\n<p>That's the simplest BAC explanation I could ever give. Here's few pages that you can to go down deeper into BAC:</p>\n<p><a href=\"https://owasp.org/Top10/A01_2021-Broken_Access_Control/\">https://owasp.org/Top10/A01_2021-Broken_Access_Control/</a></p>\n<p><a href=\"https://owasp.org/www-community/Broken_Access_Control\">https://owasp.org/www-community/Broken_Access_Control</a></p>\n<p><a href=\"https://hackerone.com/reports/1323406\">https://hackerone.com/reports/1323406</a></p>\n<p><a href=\"https://hackerone.com/reports/493324\">https://hackerone.com/reports/493324</a></p>\n<h4>2. JSON Web Token (JWT)</h4>\n<p>JSON Web tokens can be used in a wide range of functionality where integrity is a main requirement. Most common use is in Authorization of a user. Authorizing a user into an application is a task that requires rigid parameters, so that the user can only perform the tasks that it's supposed to.</p>\n<p>JWT tokens have below structure:</p>\n<pre class=\"language-javascript\"><code>[Signature information].[DATA].[Signature]</code></pre>\n<p><strong>Signature information: </strong>It defines the algorithm that has been used to generate the <strong>Signature</strong>.</p>\n<p><strong>DATA:</strong> This part of JWT has the data that contains information about the user and the session.</p>\n<p>The <strong>Signature</strong> is always created with the algorithm specified in the <strong>Signature information</strong> and a secret key which is stored on the server. The server verifies the Signature of the JWT token by using this secret key into the reverse algorithm and ensures the integrity of data.</p>\n<p>There are a lot of attacks which could be performed to misuse JWT tokens. All the type of attacks and their recipes are mentioned in this page: <a href=\"https://book.hacktricks.xyz/pentesting-web/hacking-jwt-json-web-tokens\">https://book.hacktricks.xyz/pentesting-web/hacking-jwt-json-web-tokens</a></p>\n<p>Have fun ripping apart the tokens.</p>\n<h4>3. NoSQL injection</h4>\n<p>There are various types of NoSQL databases. Most commonly used is MongoDB. But the techniques to attack these databases is almost similar.</p>\n<p>Unlike regular SQL queries, NoSQL queries are constructed using JSON objects:</p>\n<pre class=\"language-javascript\"><code>{\n    object: String, \n    q: Expression, \n    fields: Array of String, \n    groupBy: Array of String, \n    aggregation: Object mapping fields to aggregate functions \n}</code></pre>\n<p>This simple query retrieves the name and salary of all employees in position of \"Sales Manager\":</p>\n<pre class=\"language-json\"><code>{ \n    \"object\": \"employees\",\n    \"q\": { \n        \"position\" : \"Sales Manager\"  \n    },\n    \"fields\": [\"name\", \"salary\"] \n}</code></pre>\n<p>Queries can also be used to compare an object's fields to constant values using common comparison operators. For example, to retrieve all fields for all employees under the age of 25, you can use the following query:</p>\n<pre class=\"language-json\"><code>{ \n    \"object\": \"employees\",\n    \"q\": {\n        \"age\": { \"$lt\" : 25 } \n    }  \n} </code></pre>\n<p>In an application, normal authentication would look like:</p>\n<pre class=\"language-json\"><code>{\n    \"username\": \"admin\",\n    \"password\": \"password\"\n}</code></pre>\n<p>An example of successful exploitation of that authentication would be:</p>\n<pre class=\"language-json\"><code>{\n    \"username\": {\"$in\": [\"admin\", \"administrator\", \"superadmin\"]},\n    \"password\": {\"$ne\": \"\"}\n}</code></pre>\n<p>All possible attack scenarios are explained by below references:</p>\n<p><a href=\"https://book.hacktricks.xyz/pentesting-web/nosql-injection\">https://book.hacktricks.xyz/pentesting-web/nosql-injection</a></p>\n<p><a href=\"https://portswigger.net/web-security/nosql-injection\">https://portswigger.net/web-security/nosql-injection</a></p>\n<h4>4. File Upload</h4>\n<p>File upload functionlities are most likely to be vulnerable in a Web Application, due to a lot of factors involved such as file name, extension, content, etc...</p>\n<p>The first thing I do when I see a file upload functionality is that I check for what file names, extensions and contents are allowed. The best way to deal with this is to always use a wordlist to fuzz parameters of the endpoint.</p>\n<p>After fuzzing, you should be able to figure out what is allowed and what is not. And according to that, it's good to conclude whether there's a way in which you could somehow upload a file with malicious content.</p>\n<p>Now the malicious uploaded file doesn't have to be executing at the moment, because this very file could be used as a backdoor and can be used successfully to further exploit the application server.</p>\n<p>Here's few pages that you can refer to:</p>\n<p><a href=\"https://portswigger.net/web-security/file-upload\">https://portswigger.net/web-security/file-upload</a></p>\n<p><a href=\"https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload\">https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload</a></p>\n<h4>5. SSRF</h4>\n<p>Backend's of modern applications usually communicate with third-party API's to exchange data, to fulfill the requirements of the application's functionality as a whole.</p>\n<p>If this type of communication is somehow exposed by the backend to the frontend of the application, then it could be possible to manipulate the connection and make the backend to connect to attacker's server instead of the supposed connection to third-party API.</p>\n<p>This connection to attacker's server could be used by the attacker to maliciously use the third-party service to exchange data or possibly perform remote code execution on the backend. This could compromise the whole application.</p>\n<p>Here's the few pages for references:</p>\n<p><a href=\"https://portswigger.net/web-security/ssrf\">https://portswigger.net/web-security/ssrf</a></p>\n<p><a href=\"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery\">https://owasp.org/www-community/attacks/Server_Side_Request_Forgery</a></p>\n<h4>6. XXE</h4>\n<p>When an XML document containing malicious External Entity gets parsed through XML parser, it executes according to attacker's intent, then it's called XML External Entity vulnerability.</p>\n<p>This attack could lead to several types of impacts including Server Side Request Forgery (SSRF) and Remote Code Execution (RCE).</p>\n<p>Below is an example of non-malicious XML:</p>\n<pre class=\"language-apacheconf\"><code>&lt;?xml  version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE note&gt;\n&lt;note&gt;\n&lt;to&gt;John&lt;/to&gt;\n&lt;from&gt;Doe&lt;/from&gt;\n&lt;heading&gt;TODO&lt;/heading&gt;\n&lt;body&gt;Send an email to Donald&lt;/body&gt;\n&lt;/note&gt;</code></pre>\n<p>Below is an example of malicious XML:</p>\n<pre class=\"language-javascript\"><code>&lt;?xml  version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;\n&lt;!DOCTYPE foo [\n   &lt;!ELEMENT foo ANY &gt;\n   &lt;!ENTITY xxe SYSTEM  \"file:///dev/random\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;</code></pre>\n<p class=\"intro\">An XML document with correct syntax is called \"Well Formed\". An XML document validated against a DTD (Document Type Definition) is both \"Well Formed\" and \"Valid\". The DTD should be defined to the parser by the application developer. If not properly defined, then it could lead to XXE attack.</p>\n<p>Here's few pages for reference:</p>\n<p><a>https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing</a></p>\n<p><a href=\"https://www.hackerone.com/knowledge-center/xxe-complete-guide-impact-examples-and-prevention\">https://www.hackerone.com/knowledge-center/xxe-complete-guide-impact-examples-and-prevention</a></p>\n<p> </p>\n<h4>7. Broken Authentication</h4>\n<p>Entrypoints of most applications is an authentication mechanism which let's legitimate users use session of the application after using their credentials.</p>\n<p>But when this mechanism is not properly implemented, then the application is vulnerable to a lot of authentication attacks including use Default Credentials, broken MFA and Brute-force attacks.</p>\n<p>The impact of this vulnerability depends on the domain of the application, as this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.</p>\n<p>Here's few pages for reference:</p>\n<p><a href=\"https://portswigger.net/web-security/authentication\">https://portswigger.net/web-security/authentication</a></p>\n<p><a href=\"https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\">https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication</a></p>\n<h4>8. XSS</h4>\n<p>Cross-site Scripting (XSS) attack involves executing arbitrary Javascript code on victim's browser. This could help attacker to steal victim's account information or to perform actions on behalf of victim in an application.</p>\n<p>There are 3 types of XSS:</p>\n<ul>\n<li>Reflected Cross-site Scripting</li>\n<li>Stored Cross-site Scripting</li>\n<li>DOM-based Cross-site Scripting</li>\n</ul>\n<h6>Reflected XSS</h6>\n<p>Attacker crafts and sends an exploit URL to the victim using social engineering. This exploit URL contains malicious characters with arbitrary javascript code in the parameter's value. Now this arbitrary javascript code get's executed when victim clicks that URL.</p>\n<h6>Stored XSS</h6>\n<p>The attacker crafts an exploit similar to Reflected XSS but instead of sending exploit URL to victim, the attacker inserts it into an information storing function in the application or third-party application which is retrievable through another function of the application. When victim uses the retrieve function, the malicious Javascript executes.</p>\n<h6>DOM-based XSS</h6>\n<p>DOM stands for Document Object Model of browsers. DOM has a source and a sink. A DOM source serves function of retrieving data from user's input and DOM sink serves the function of processing the retrieved data. Javascript takes data from sources and passes it to the sink. This attack happens when an attacker inserts malicious characters and arbitrary Javascript code into DOM source, and this code is later processed by DOM sink and the arbitrary Javascript code is executed.</p>\n<p>Here's few pages for reference:</p>\n<p><a href=\"https://portswigger.net/web-security/cross-site-scripting\">https://portswigger.net/web-security/cross-site-scripting</a></p>\n<p><a href=\"https://owasp.org/www-community/attacks/xss/\">https://owasp.org/www-community/attacks/xss/</a></p>\n<h4>9. Sensitive Data Exposure</h4>\n<p>Everyone has to do their own research about where to look for this bug class, because every web application is made for a specific business logic.</p>\n<p>All it takes to figure out where to look, is understanding the business logic. But some of the places are generally usable for every type of web application:</p>\n<pre class=\"language-bash\"><code>- Social Media\n\n- Search engines: https://github.com/T43cr0wl3r/OSINT-RECON/blob/master/Dorking.md\n\n- Quick Hits: https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/quickhits.txt\n\n- Github - Employee's/Contractor's property (Social Media, Portfolio etc...)\n\n- Other OSINT methods\n\n- Web App Errors\n\n- AI dumps: (i.e. ChatGPT share leaks)\n\n- WayBack Machine</code></pre>\n<h4>10. Business Logic Failure</h4>\n<p>Business Logic Flaws are simply failure of the application to follow the rules of business. This bug class is diverse and huge enough to understand without an example.</p>\n<p>So, here's an example:</p>\n<p>An e-commerce bookstore web application is designed to handle discount code. For example, there's a discount run by the company for 20% discount. An attacker tries to use the same discount code twice on total cart value of $1000, on the first try, the discount code works as expected and gives the final price to be $800.</p>\n<p>Then, the attacker applies the discount code again and the application gives discount of 20% again, so the final price becomes $640. In this example, the application fails to check whether the discount code has been already used on the cart.</p>\n<p>Here's few pages for reference:</p>\n<p><a href=\"https://portswigger.net/web-security/logic-flaws\">https://portswigger.net/web-security/logic-flaws</a></p>\n<p><a href=\"https://owasp.org/www-community/vulnerabilities/Business_logic_vulnerability\">https://owasp.org/www-community/vulnerabilities/Business_logic_vulnerability</a></p>\n<h3>Conclusion</h3>\n<p>These vulnerabilities are a huge challenge for any organization looking forward to make their web applications secure. Hopefully, this post by me provided you an insight on Top 10 vulnerabilities in this era of web applications. Thank you for reading and stay tuned on my 𝕏 for more posts and content like this.</p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
            ],
            "date_published": "2024-04-10T16:55:34+02:00",
            "date_modified": "2024-06-03T15:32:58+02:00"
        },
        {
            "id": "https://blog.rockbytesec.com/simple-zipping-and-unzipping-on-linux.html",
            "url": "https://blog.rockbytesec.com/simple-zipping-and-unzipping-on-linux.html",
            "title": "Simple Zipping and Unzipping on Linux",
            "summary": "Nothing important here, move to Zipping part. It's so weird that nobody on internet talks about how to zip and unzip on linux. I happened to find some articles about&hellip;",
            "content_html": "<blockquote>\n<p>Nothing important here, move to Zipping part.</p>\n</blockquote>\n<p>It's so weird that nobody on internet talks about how to zip and unzip on linux.</p>\n<p>I happened to find some articles about this topic but I only got the ones that talk about <strong>tar or gz</strong> file types.</p>\n<p>ChatGPT has destroyed people's mind and I was frustrated just like you. So, here is a quick tutorial of zipping and unzipping.</p>\n<h1>Zipping:</h1>\n<p>So let's say you have a zipped file with name: </p>\n<pre class=\"language-bash\"><code>alice.zip</code></pre>\n<p>How do you unzip this file? Here's the command:</p>\n<pre class=\"language-bash\"><code>zip -r alice.zip alice</code></pre>\n<p>Let me explain what's happening in the above command:</p>\n<ul>\n<li><strong>zip </strong>: tool name</li>\n<li><strong>-r </strong>: flag to make it recursively</li>\n<li><strong>alice.zip</strong> : Final result zip file that you need</li>\n<li><strong>alice</strong> : folder to zip</li>\n</ul>\n<h1>Unzipping:</h1>\n<p>Now about Unzipping:</p>\n<pre class=\"language-bash\"><code>unzip alice.zip -d bob</code></pre>\n<p>About this command:</p>\n<ul>\n<li><strong>unzip </strong>: tool name</li>\n<li><strong>alice.zip</strong> : Zipped file that you want to unzip</li>\n<li><strong>-d </strong>: flag to to specify the directory of extraction</li>\n<li><strong>bob</strong> : folder to put the contents of the zipped file</li>\n</ul>\n<p>The main thing here is that the directory doesn't have to exist before you run unzip command.</p>\n<p> </p>\n<p>I hope it helped you.</p>\n<p>Stay tuned on my 𝕏 account for updates. Thank you!</p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
                   "Pentesters",
                   "Developers"
            ],
            "date_published": "2024-03-02T22:23:23+01:00",
            "date_modified": "2024-03-02T22:24:36+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/7-cybersecurity-tips-for-developers.html",
            "url": "https://blog.rockbytesec.com/7-cybersecurity-tips-for-developers.html",
            "title": "7 CyberSecurity Tips for Developers",
            "summary": "No matter how many penetration tests your organization runs per year, this thing always gives you headaches and overtime. Yes, we’re talking about manual penetration tests. It’s undeniable that every&hellip;",
            "content_html": "<p>No matter how many penetration tests your organization runs per year, this thing always gives you headaches and overtime. Yes, we’re talking about manual penetration tests.</p><p>It’s undeniable that every now and then you get a list of vulnerabilities in a report created by penetration testers. You’ve definitely experienced fixing these vulnerabilities in your web applications.</p><p>But it’s certainly not as easy as it is to spell the names of the vulnerabilities.</p><p>Here are the top 7 CyberSecurity Tips, these tips will save you from getting migraines:</p><h2 id=\"1-input-validation\">1. Input Validation</h2>\n<p>While creating the web application, you should make a note of every function that takes user input. An Excel sheet would work wonders. Name of the parameter, what type of values, etc…</p><p>Closely understand what is the requirement of the user’s input here and how you could take the minimum possible input from the user.</p><p>Boolean, Integers and Floats types are safe inputs by design but Strings and Objects types are where penetration testers try to have their fun.</p><p>It’s best practice to determine which type of input is required. On top of it, using Regex to whitelist and verify that input is really what is expected by the application.</p><p><strong>For Example:</strong> You need to take input as an email address. Instead of taking the input and immediately processing it through the database, you should process it through a middleware function like this:</p><pre><code class=\"language-js\">function validateEmail(email) {\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return emailRegex.test(email);\n}\n</code></pre>\n<p>This was just an example of what middleware function could be used to validate email addresses from the user’s input.</p><p>After understanding the above code you should be able to create middleware functions for any type of input validation.</p><h2 id=\"2-role-based-access-control\">2. Role-Based Access Control</h2>\n<p>Whenever a hierarchy exists in an organization, there is a need for a role-based web application.</p><p>Roles could be anything from Administrator to the normal user. A role is typically associated with the real role of a person in the business hierarchy.</p><p>A web application could have 1 or more roles. In the case of 1 role, there is no need to have authorization-based access control, except for the requirement to check whether the user is logged in.</p><p>But when the role count increases to 2, you need to have proper access control.</p><p>The user of one role shouldn’t be able to perform tasks that should only be performed by the user of another role.</p><p><strong>For Example:</strong> A normal user shouldn’t be able to perform a task such as creating new users in the application which according to business logic, only an Administrator should be able to perform.</p><h2 id=\"3-session-management\">3. Session Management</h2>\n<p>Managing user sessions includes creating, validating and deleting session cookies.</p><p>A session cookie leakage could lead to all sorts of problems including account takeover.</p><p>It’s a best practice to delete the session cookies from the database after the user logs out to ensure that the cookie can no longer be used by anyone in case an attacker has physical access to the user’s computer.</p><h2 id=\"4-http-security-headers-configuration\">4. HTTP Security headers configuration</h2>\n<p>Some HTTP security headers need to be in place to prevent various types of attacks.</p><p>This page from <a href=\"https://infosec.mozilla.org/guidelines/web_security\">Mozilla</a> explains exactly what you need to understand and implement in the application to ensure that all browser-related security requirements are met.</p><h2 id=\"5-error-handling\">5. Error Handling</h2>\n<p>Handling the errors the right way in the application is very important. Default error pages of the servers and frameworks are known to reveal information that could be useful to attackers for future exploitation and discovery of new attack scenarios.</p><p><strong>For Example:</strong> A custom error page like this will prevent the leakage of any information.</p><hr>\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/Wikimedia_error_404.png\" alt=\"https://upload.wikimedia.org/wikipedia/commons/e/e0/Wikimedia_error_404.png\"  data-is-external-image=\"true\"></figure><hr>\n<h2 id=\"6-secure-javascript\">6. Secure Javascript</h2>\n<p>Creating functionality in Javascript is super easy but when it comes to client-side security, it’s a rough road.</p><p>When it comes to input validation, the first tip is going to help you. But writing secure client-side Javascript is more than that.</p><p>This page from <a href=\"https://developer.mozilla.org/en-US/docs/Web/Security\">Mozilla</a> is going to help you through your journey of your secure by design web application’s client-side.</p><h2 id=\"7-patching\">7. Patching</h2>\n<p>Outdated softwares almost always have known vulnerabilities. That’s where patching the software and libraries helps your overall web application security posture to be ideal for security by design principles.</p><p>Having outdated software doesn’t mean only one component could be attacked, it certainly affects the whole application.</p><p>You should ensure that your code is not relying on any sort of outdated version of a library. Patching or updating those libraries to the latest versions routinely is a major step towards the security of your web applications.</p><h1 id=\"conclusion\">Conclusion</h1>\n<p>Following all the 7 tips listed above will improve your security posture to the next level.</p><p>I usually post tips for developers, so feel free to browse through my blog.</p><p>Soon, I’ll be going through these tips with more details and examples.</p><p>So, Until then: STAY TUNED!</p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
                   "Developers"
            ],
            "date_published": "2024-01-15T15:31:50+01:00",
            "date_modified": "2024-01-15T15:32:09+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/simple-guide-to-wordlists.html",
            "url": "https://blog.rockbytesec.com/simple-guide-to-wordlists.html",
            "title": "Simple Guide to Wordlists",
            "summary": "The only advantage you can have above attackers in a BlackBox Pentest is your wordlists. For example, if an attacker has 100 words and a Pentester has 150 words, then&hellip;",
            "content_html": "<p>The only advantage you can have above attackers in a BlackBox Pentest is your wordlists. For example, if an attacker has 100 words and a Pentester has 150 words, then after a Pentest, there is a higher chance that the Pentester would figure out more endpoints in the application than the attacker and so the Pentester will be able to report more vulnerabilities. This ultimately leads to robust security.</p><p>Whether you’re testing a Web/API server or performing an infrastructure Pentest, wordlists are your most important tool when it comes to discovering new endpoints or brute-forcing passwords.</p><p>I recommend keeping different wordlists for different purposes.</p><p>Here are the 3 robust steps that will help you create and maintain your wordlists:</p><h2 id=\"1-run-cewl-on-target-application\">1. Run <a href=\"https://github.com/digininja/CeWL.git\">CeWL</a> on Target application</h2>\n<p>CeWL is an open-source tool to create wordlists by crawling through a web application. It will only create the wordlist with words that are found on the application, so there will be much less noise than a typical wordlist that you download from the internet.</p><h2 id=\"2-use-altdns-for-permutations\">2. Use <a href=\"https://github.com/infosec-au/altdns.git\">AltDNS</a> for Permutations</h2>\n<p>Assuming you have already run CeWL and created a wordlist. The next step is to run AltDNS to generate permutations of the wordlist that has been generated by CeWL. Usually, AltDNS results in a huge wordlist, it might take some time, so be patient. Good things take time. The result will be a master list. Be sure to sort and remove duplicates.</p><h2 id=\"3-maintaining-the-wordlist\">3. Maintaining the wordlist</h2>\n<p>Maintaining a healthy wordlist is the key to success of a penetration test. To do so, running CeWL on every web application you encounter and adding the output to the master list is important.</p><p>This is a good way to have a wordlist for your penetration tests. With each penetration test you perform, your master wordlist is going to get stronger and stronger. Now for wordlist of passwords, you can use a common password wordlist from the internet as an input to AltDNS would result in a great wordlist.</p>",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
                   "Pentesters"
            ],
            "date_published": "2024-01-15T15:30:19+01:00",
            "date_modified": "2024-01-15T15:32:19+01:00"
        },
        {
            "id": "https://blog.rockbytesec.com/guide-to-whitebox-pentest.html",
            "url": "https://blog.rockbytesec.com/guide-to-whitebox-pentest.html",
            "title": "Guide to Whitebox Pentest",
            "summary": "Reading code is like a Pentester’s superpower. Although it takes a lot of time to get good at it just like any other skill. But once you know how to&hellip;",
            "content_html": "<p>Reading code is like a Pentester’s superpower. Although it takes a lot of time to get good at it just like any other skill.</p><p>But once you know how to read and understand code efficiently in multiple languages, you can leverage that superpower to find the vulnerabilities that couldn’t have been found.</p><p>These are the steps to make sure to make the best out of your practice of reading code:</p><h2 id=\"1-know-how-to-code-and-know-computer-science\">1. Know how to code and know Computer Science.</h2>\n<p>Reading the code comes after knowing how to code. Most of the hackers out there preach that you don’t need to know how to code to be a hacker and that’s absolutely a lie.\nLearning how to code should be the first thing you have to do in your journey to become a hacker. Learn to code not in one but multiple languages.\nFirst, learn to write code in Python and then C++. This way you’d understand programming concepts, low-level and object-oriented stuff.\nOn top of this, you should know Computer Science concepts in depth.\nAll of this is important to have technical mastery in the field of CyberSecurity.</p><h2 id=\"2-know-how-to-pentest-blackbox-applications\">2. Know how to Pentest BlackBox applications</h2>\n<p>Having done some BlackBox Pentests is a great way to have knowledge of vulnerabilities that could ever exist in the applications.\nIf you know what vulnerabilities could possibly exist in a BlackBox application, then certainly you know what vulnerabilities could exist in a WhiteBox Application after you have read the code.</p><h2 id=\"3-setting-up-the-environment\">3. Setting up the environment</h2>\n<p>You could be the best hacker in the world, you could be James Bond of the hackers’ world. But you can only perform so much without a perfect environment setup to start with.</p><p>Here is the essential list of what you’ll need to set to read code:</p><ul>\n<li>The application should be running with debugging enabled.</li>\n<li>A perfect IDE connected to the debugging port of the application.</li>\n<li>Set a breakpoint</li>\n<li>Test if the IDE stops at the breakpoint</li>\n</ul>\n<h2 id=\"4-reading-and-understanding-the-code\">4. Reading and Understanding the code</h2>\n<p>Ideally, the IDE will outline the functions of the application in the code. Go through each function one by one, by using the corresponding functionality in the application all while setting breakpoints, to understand their role in the application.</p><p>After understanding the functions, you should be able to understand the developer’s writing pattern and business logic. Also, You should be able to understand the role of each function in the code.</p><p>Finding vulnerabilities becomes so much easier when you have a complete map of the application’s functions in mind.</p><h2 id=\"5-finding-the-vulnerabilities\">5. Finding the Vulnerabilities</h2>\n<p>If you have done all the above steps correctly, then you’ll be automatically figuring out the possibilities of vulnerabilities.</p><blockquote>\n<p>As this is just an overview of WhiteBox Pentest, I’ll going over every step in detail. Stay Tuned!</p></blockquote>\n",
            "author": {
                "name": "Mehul Panchal"
            },
            "tags": [
                   "Pentesters"
            ],
            "date_published": "2024-01-15T15:29:43+01:00",
            "date_modified": "2024-01-15T15:32:41+01:00"
        }
    ]
}
